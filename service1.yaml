AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.
Parameters:
  ClusterName:
    Type: String
    Default: Lease_Self-Service_Portal-v5
    Description: A name for the Cluster

  ServiceName:
    Type: String
    Default: Test
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: docker.io/tvhoa289/spring-boot-tranform-p8081
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerName:
    Type: String
    Default: abc
    Description: What port number the application inside the docker container is binding to
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 128
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  Path:
    Type: String
    Default: "/"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 2
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  SecurityGroupsECS:
    Type: String
    Default: sg-0c7a79b7629bcc382
    Description: SecurityGroup for ECS 
  
  VPC:
    Type: String
    Default: vpc-07ff144e65d289ee1
    Description: VPC
  Family:
    Type: String
    Default: service1
    Description: Family group for TaskDefinition1

  TargetGroupName:
    Type: String
    Default: service1
    Description: Name for targetgroup

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

  SubnetPublic1:
    Type: String
    Default: subnet-02a4d854fde732522
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

  SubnetPublic2:
    Type: String
    Default: subnet-00c663e51cf7ce392
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  
  PublicLoadBalancerListener:
    Type: String
    Default: arn:aws:elasticloadbalancing:eu-central-1:810733428226:listener/app/lssp-PublicLoadBalancer/de3943993baea71a/d4ac94794134f02e
    Description: Listener for forward traffic

  PrivateALBEcsPublicListener:
    Type: String
    Default: arn:aws:elasticloadbalancing:eu-central-1:810733428226:listener/app/lssp-PrivateALBEcsPublic/efa0e7fd374acd0a/8d49cef0f666e3d3
    Description: Listener for forward traffic


  AutoscalingRole:
    Type: String
    Default: arn:aws:iam::810733428226:role/lssp-AutoscalingRole-VVUBKON54DD8
    Description: Listener for forward traffic

  ExecutionRoleArn:
    Type: String
    Default: arn:aws:iam::810733428226:role/lssp-ECSTaskExecutionRole-L20GEPJBOO5J
    Description: Role for container push log.
Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

  # Create a rule on the load balancer for routing traffic to the target group

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName]]

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: !Ref 'Priority'

  LoadBalancerRulePrivate:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref PrivateALBEcsPublicListener
      Priority: !Ref 'Priority'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: !Ref 'Path'
      HealthCheckProtocol: HTTP
      TargetType: ip
      Name: !Ref 'TargetGroupName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      VpcId: !Ref 'VPC'
        
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref Family
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      ExecutionRoleArn: !Ref 'ExecutionRoleArn'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref 'ContainerName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          # Enable push logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: 'ecs'

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref 'ClusterName'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          {
              "AssignPublicIp" : ENABLED,
              "SecurityGroups" : [ !Ref SecurityGroupsECS ],
              "Subnets" : [ !Ref SubnetPublic1 , !Ref SubnetPublic2 ]
          }
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ContainerName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - !Ref 'ClusterName'
            - !Ref 'ServiceName'
      MinCapacity: 1
      MaxCapacity: 4
      RoleARN: !Ref AutoscalingRole

  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'ServiceName'
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - !Ref 'ClusterName'
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: 'Average'
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'ServiceName'
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - !Ref 'ClusterName'
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
        MetricAggregationType: 'Average'
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - low-cpu
            - !Ref 'ClusterName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "Low CPU utilization for service"
            - !Ref 'ServiceName'
            - "in cluster"
            - !Ref 'ClusterName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value: !Ref ClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - high-cpu
            - !Ref 'ClusterName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "High CPU utilization for service"
            - !Ref 'ServiceName'
            - "in cluster"
            - !Ref 'ClusterName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value: !Ref 'ClusterName'
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  